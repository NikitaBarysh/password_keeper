// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	entity "password_keeper/internal/common/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorizationService is a mock of AuthorizationService interface.
type MockAuthorizationService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationServiceMockRecorder
}

// MockAuthorizationServiceMockRecorder is the mock recorder for MockAuthorizationService.
type MockAuthorizationServiceMockRecorder struct {
	mock *MockAuthorizationService
}

// NewMockAuthorizationService creates a new mock instance.
func NewMockAuthorizationService(ctrl *gomock.Controller) *MockAuthorizationService {
	mock := &MockAuthorizationService{ctrl: ctrl}
	mock.recorder = &MockAuthorizationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationService) EXPECT() *MockAuthorizationServiceMockRecorder {
	return m.recorder
}

// CheckData mocks base method.
func (m *MockAuthorizationService) CheckData(ctx context.Context, user entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckData", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckData indicates an expected call of CheckData.
func (mr *MockAuthorizationServiceMockRecorder) CheckData(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckData", reflect.TypeOf((*MockAuthorizationService)(nil).CheckData), ctx, user)
}

// CreateUser mocks base method.
func (m *MockAuthorizationService) CreateUser(ctx context.Context, user entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationServiceMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorizationService)(nil).CreateUser), ctx, user)
}

// GenerateJWTToken mocks base method.
func (m *MockAuthorizationService) GenerateJWTToken(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWTToken", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWTToken indicates an expected call of GenerateJWTToken.
func (mr *MockAuthorizationServiceMockRecorder) GenerateJWTToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWTToken", reflect.TypeOf((*MockAuthorizationService)(nil).GenerateJWTToken), userID)
}

// GetUserIDFromToken mocks base method.
func (m *MockAuthorizationService) GetUserIDFromToken(tokenString string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDFromToken", tokenString)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetUserIDFromToken indicates an expected call of GetUserIDFromToken.
func (mr *MockAuthorizationServiceMockRecorder) GetUserIDFromToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDFromToken", reflect.TypeOf((*MockAuthorizationService)(nil).GetUserIDFromToken), tokenString)
}

// ValidateLogin mocks base method.
func (m *MockAuthorizationService) ValidateLogin(ctx context.Context, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateLogin", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateLogin indicates an expected call of ValidateLogin.
func (mr *MockAuthorizationServiceMockRecorder) ValidateLogin(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateLogin", reflect.TypeOf((*MockAuthorizationService)(nil).ValidateLogin), ctx, user)
}

// MockDataServiceInterface is a mock of DataServiceInterface interface.
type MockDataServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDataServiceInterfaceMockRecorder
}

// MockDataServiceInterfaceMockRecorder is the mock recorder for MockDataServiceInterface.
type MockDataServiceInterfaceMockRecorder struct {
	mock *MockDataServiceInterface
}

// NewMockDataServiceInterface creates a new mock instance.
func NewMockDataServiceInterface(ctrl *gomock.Controller) *MockDataServiceInterface {
	mock := &MockDataServiceInterface{ctrl: ctrl}
	mock.recorder = &MockDataServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataServiceInterface) EXPECT() *MockDataServiceInterfaceMockRecorder {
	return m.recorder
}

// DeleteData mocks base method.
func (m *MockDataServiceInterface) DeleteData(ctx context.Context, id int, eventType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", ctx, id, eventType)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockDataServiceInterfaceMockRecorder) DeleteData(ctx, id, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockDataServiceInterface)(nil).DeleteData), ctx, id, eventType)
}

// GetData mocks base method.
func (m *MockDataServiceInterface) GetData(ctx context.Context, id int, eventType string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", ctx, id, eventType)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockDataServiceInterfaceMockRecorder) GetData(ctx, id, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockDataServiceInterface)(nil).GetData), ctx, id, eventType)
}

// SetData mocks base method.
func (m *MockDataServiceInterface) SetData(ctx context.Context, id int, text []byte, eventType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetData", ctx, id, text, eventType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetData indicates an expected call of SetData.
func (mr *MockDataServiceInterfaceMockRecorder) SetData(ctx, id, text, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetData", reflect.TypeOf((*MockDataServiceInterface)(nil).SetData), ctx, id, text, eventType)
}
