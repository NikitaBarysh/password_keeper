// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package sender is a generated GoMock package.
package sender

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSendInterface is a mock of SendInterface interface.
type MockSendInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSendInterfaceMockRecorder
}

// MockSendInterfaceMockRecorder is the mock recorder for MockSendInterface.
type MockSendInterfaceMockRecorder struct {
	mock *MockSendInterface
}

// NewMockSendInterface creates a new mock instance.
func NewMockSendInterface(ctrl *gomock.Controller) *MockSendInterface {
	mock := &MockSendInterface{ctrl: ctrl}
	mock.recorder = &MockSendInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendInterface) EXPECT() *MockSendInterfaceMockRecorder {
	return m.recorder
}

// ConnectWs mocks base method.
func (m *MockSendInterface) ConnectWs() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConnectWs")
}

// ConnectWs indicates an expected call of ConnectWs.
func (mr *MockSendInterfaceMockRecorder) ConnectWs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectWs", reflect.TypeOf((*MockSendInterface)(nil).ConnectWs))
}

// DeleteDataRequest mocks base method.
func (m *MockSendInterface) DeleteDataRequest(eventType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataRequest", eventType)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataRequest indicates an expected call of DeleteDataRequest.
func (mr *MockSendInterfaceMockRecorder) DeleteDataRequest(eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataRequest", reflect.TypeOf((*MockSendInterface)(nil).DeleteDataRequest), eventType)
}

// GetDataRequest mocks base method.
func (m *MockSendInterface) GetDataRequest(eventType string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataRequest", eventType)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataRequest indicates an expected call of GetDataRequest.
func (mr *MockSendInterfaceMockRecorder) GetDataRequest(eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataRequest", reflect.TypeOf((*MockSendInterface)(nil).GetDataRequest), eventType)
}

// PostDataRequest mocks base method.
func (m *MockSendInterface) PostDataRequest(data, eventType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostDataRequest", data, eventType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostDataRequest indicates an expected call of PostDataRequest.
func (mr *MockSendInterfaceMockRecorder) PostDataRequest(data, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostDataRequest", reflect.TypeOf((*MockSendInterface)(nil).PostDataRequest), data, eventType)
}

// PostUserRequest mocks base method.
func (m *MockSendInterface) PostUserRequest(login, password, path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostUserRequest", login, password, path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostUserRequest indicates an expected call of PostUserRequest.
func (mr *MockSendInterfaceMockRecorder) PostUserRequest(login, password, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostUserRequest", reflect.TypeOf((*MockSendInterface)(nil).PostUserRequest), login, password, path)
}
